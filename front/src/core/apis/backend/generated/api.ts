/* tslint:disable */
/* eslint-disable */
/**
 * Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "./base";

/**
 *
 * @export
 * @interface RoomModel
 */
export interface RoomModel {
	/**
	 *
	 * @type {string}
	 * @memberof RoomModel
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof RoomModel
	 */
	fileName: string;
	/**
	 *
	 * @type {string}
	 * @memberof RoomModel
	 */
	idVideo: string;
	/**
	 *
	 * @type {string}
	 * @memberof RoomModel
	 */
	location: string;
	/**
	 *
	 * @type {RoomState}
	 * @memberof RoomModel
	 */
	state: RoomState;
}

/**
 *
 * @export
 * @enum {string}
 */

export enum RoomState {
	Paused = "PAUSED",
	Playing = "PLAYING",
}

/**
 *
 * @export
 * @interface VideoModel
 */
export interface VideoModel {
	/**
	 *
	 * @type {string}
	 * @memberof VideoModel
	 */
	id: string;
	/**
	 *
	 * @type {string}
	 * @memberof VideoModel
	 */
	idFile: string;
	/**
	 *
	 * @type {string}
	 * @memberof VideoModel
	 */
	idConvertedFile?: string | null;
}

/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createRoom: async (body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'body' is not null or undefined
			assertParamExists("createRoom", "body", body);
			const localVarPath = `/rooms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteRoom: async (idRoom: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'idRoom' is not null or undefined
			assertParamExists("deleteRoom", "idRoom", idRoom);
			const localVarPath = `/rooms/{idRoom}`.replace(`{${"idRoom"}}`, encodeURIComponent(String(idRoom)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRoom: async (idRoom: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'idRoom' is not null or undefined
			assertParamExists("getRoom", "idRoom", idRoom);
			const localVarPath = `/rooms/{idRoom}`.replace(`{${"idRoom"}}`, encodeURIComponent(String(idRoom)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRooms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/rooms`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {number} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		seekTime: async (idRoom: string, body?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'idRoom' is not null or undefined
			assertParamExists("seekTime", "idRoom", idRoom);
			const localVarPath = `/rooms/{idRoom}/time`.replace(`{${"idRoom"}}`, encodeURIComponent(String(idRoom)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {RoomState} state
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateRoomState: async (idRoom: string, state: RoomState, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'idRoom' is not null or undefined
			assertParamExists("updateRoomState", "idRoom", idRoom);
			// verify required parameter 'state' is not null or undefined
			assertParamExists("updateRoomState", "state", state);
			const localVarPath = `/rooms/{idRoom}/state/{state}`.replace(`{${"idRoom"}}`, encodeURIComponent(String(idRoom))).replace(`{${"state"}}`, encodeURIComponent(String(state)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createRoom(body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createRoom(body, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteRoom(idRoom: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(idRoom, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getRoom(idRoom: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getRoom(idRoom, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getRooms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoomModel>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getRooms(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {number} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async seekTime(idRoom: string, body?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.seekTime(idRoom, body, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {RoomState} state
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateRoomState(idRoom: string, state: RoomState, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoomState(idRoom, state, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = RoomApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} body
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createRoom(body: string, options?: any): AxiosPromise<RoomModel> {
			return localVarFp.createRoom(body, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteRoom(idRoom: string, options?: any): AxiosPromise<void> {
			return localVarFp.deleteRoom(idRoom, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRoom(idRoom: string, options?: any): AxiosPromise<RoomModel> {
			return localVarFp.getRoom(idRoom, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRooms(options?: any): AxiosPromise<Array<RoomModel>> {
			return localVarFp.getRooms(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {number} [body]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		seekTime(idRoom: string, body?: number, options?: any): AxiosPromise<void> {
			return localVarFp.seekTime(idRoom, body, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} idRoom
		 * @param {RoomState} state
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateRoomState(idRoom: string, state: RoomState, options?: any): AxiosPromise<void> {
			return localVarFp.updateRoomState(idRoom, state, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
	/**
	 *
	 * @param {string} body
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RoomApi
	 */
	public createRoom(body: string, options?: AxiosRequestConfig) {
		return RoomApiFp(this.configuration)
			.createRoom(body, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} idRoom
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RoomApi
	 */
	public deleteRoom(idRoom: string, options?: AxiosRequestConfig) {
		return RoomApiFp(this.configuration)
			.deleteRoom(idRoom, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} idRoom
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RoomApi
	 */
	public getRoom(idRoom: string, options?: AxiosRequestConfig) {
		return RoomApiFp(this.configuration)
			.getRoom(idRoom, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RoomApi
	 */
	public getRooms(options?: AxiosRequestConfig) {
		return RoomApiFp(this.configuration)
			.getRooms(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} idRoom
	 * @param {number} [body]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RoomApi
	 */
	public seekTime(idRoom: string, body?: number, options?: AxiosRequestConfig) {
		return RoomApiFp(this.configuration)
			.seekTime(idRoom, body, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} idRoom
	 * @param {RoomState} state
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RoomApi
	 */
	public updateRoomState(idRoom: string, state: RoomState, options?: AxiosRequestConfig) {
		return RoomApiFp(this.configuration)
			.updateRoomState(idRoom, state, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * VideoApi - axios parameter creator
 * @export
 */
export const VideoApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} container
		 * @param {any} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addVideo: async (filename: string, container: string, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'filename' is not null or undefined
			assertParamExists("addVideo", "filename", filename);
			// verify required parameter 'container' is not null or undefined
			assertParamExists("addVideo", "container", container);
			// verify required parameter 'file' is not null or undefined
			assertParamExists("addVideo", "file", file);
			const localVarPath = `/videos`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

			if (filename !== undefined) {
				localVarFormParams.append("filename", filename as any);
			}

			if (container !== undefined) {
				localVarFormParams.append("container", container as any);
			}

			if (file !== undefined) {
				localVarFormParams.append("file", file as any);
			}

			localVarHeaderParameter["Content-Type"] = "multipart/form-data";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		convertVideo: async (idVideo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'idVideo' is not null or undefined
			assertParamExists("convertVideo", "idVideo", idVideo);
			const localVarPath = `/videos/{idVideo}/convert`.replace(`{${"idVideo"}}`, encodeURIComponent(String(idVideo)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteVideo: async (idVideo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'idVideo' is not null or undefined
			assertParamExists("deleteVideo", "idVideo", idVideo);
			const localVarPath = `/videos/{idVideo}`.replace(`{${"idVideo"}}`, encodeURIComponent(String(idVideo)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getVideo: async (idVideo: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'idVideo' is not null or undefined
			assertParamExists("getVideo", "idVideo", idVideo);
			const localVarPath = `/videos/{idVideo}`.replace(`{${"idVideo"}}`, encodeURIComponent(String(idVideo)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getVideos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/videos`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * VideoApi - functional programming interface
 * @export
 */
export const VideoApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = VideoApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} container
		 * @param {any} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addVideo(filename: string, container: string, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addVideo(filename, container, file, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async convertVideo(idVideo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.convertVideo(idVideo, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteVideo(idVideo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVideo(idVideo, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getVideo(idVideo: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getVideo(idVideo, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getVideos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VideoModel>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getVideos(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * VideoApi - factory interface
 * @export
 */
export const VideoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = VideoApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} container
		 * @param {any} file
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addVideo(filename: string, container: string, file: any, options?: any): AxiosPromise<VideoModel> {
			return localVarFp.addVideo(filename, container, file, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		convertVideo(idVideo: string, options?: any): AxiosPromise<VideoModel> {
			return localVarFp.convertVideo(idVideo, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteVideo(idVideo: string, options?: any): AxiosPromise<void> {
			return localVarFp.deleteVideo(idVideo, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} idVideo
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getVideo(idVideo: string, options?: any): AxiosPromise<VideoModel> {
			return localVarFp.getVideo(idVideo, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getVideos(options?: any): AxiosPromise<Array<VideoModel>> {
			return localVarFp.getVideos(options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * VideoApi - object-oriented interface
 * @export
 * @class VideoApi
 * @extends {BaseAPI}
 */
export class VideoApi extends BaseAPI {
	/**
	 *
	 * @param {string} filename
	 * @param {string} container
	 * @param {any} file
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VideoApi
	 */
	public addVideo(filename: string, container: string, file: any, options?: AxiosRequestConfig) {
		return VideoApiFp(this.configuration)
			.addVideo(filename, container, file, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} idVideo
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VideoApi
	 */
	public convertVideo(idVideo: string, options?: AxiosRequestConfig) {
		return VideoApiFp(this.configuration)
			.convertVideo(idVideo, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} idVideo
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VideoApi
	 */
	public deleteVideo(idVideo: string, options?: AxiosRequestConfig) {
		return VideoApiFp(this.configuration)
			.deleteVideo(idVideo, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} idVideo
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VideoApi
	 */
	public getVideo(idVideo: string, options?: AxiosRequestConfig) {
		return VideoApiFp(this.configuration)
			.getVideo(idVideo, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof VideoApi
	 */
	public getVideos(options?: AxiosRequestConfig) {
		return VideoApiFp(this.configuration)
			.getVideos(options)
			.then((request) => request(this.axios, this.basePath));
	}
}
